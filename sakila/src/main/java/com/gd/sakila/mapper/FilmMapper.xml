<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	<!-- 영화 카테고리 수정 -->
	<update id="updateCategoryByFilmId" parameterType="map">
		UPDATE film_category
		SET category_id = #{categoryId}
		WHERE film_id = #{filmId}
	</update>
	
	<!-- 영화 수정 -->
	<update id="updateFilm" parameterType="com.gd.sakila.vo.Film">
		UPDATE film 
		SET title = #{title},
			description = #{description},
			release_year = #{releaseYear},
			language_id = #{languageId},
			original_language_id = #{originalLanguageId},
			rental_duration = #{rentalDuration},
			rental_rate = #{rentalRate},
			length = #{length},
			replacement_cost = #{replacementCost},
			rating = #{rating},
			special_features = #{specialFeatures}
		WHERE film_id = #{filmId}
	</update>
	
	<!-- 영화 삭제 -->
	<delete id="deleteFilm"
			parameterType="int">
		DELETE FROM film
		<where>
			film_id = #{filmId}
		</where>  
	</delete>
	
	<!-- film_categoryt에 영화 추가 -->
	<insert id="insertFilmCategory"
			parameterType="java.util.Map">
		INSERT INTO film_category(
			film_id,
			category_id
		) VALUES (
			#{filmId},
			#{categoryId}
		)
	</insert>
	
	<!-- 영화 추가 -->
	<insert id="insertFilm"
			parameterType="com.gd.sakila.vo.Film">
		<selectKey keyProperty="filmId" resultType="int" order="AFTER"> <!-- selectKey : insert 시에 autoincrement 기능이 가능하도록 함, insert를 실행하고 있을 때는 다른 쿼리가 실행되지 않도록 lock을 거는 기능 -->
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO film(
            title,
            description,
            release_year,
            language_id,
            original_language_id,
            rental_duration,
            rental_rate,
            length,
            replacement_cost,
            rating,
            special_features,
            last_update
         ) VALUES (
            #{title},
            #{description},
            #{releaseYear},
            #{languageId},
            #{originalLanguageId},
            #{rentalDuration},
            #{rentalRate},
            #{length},
            #{replacementCost},
            #{rating},
            #{specialFeatures},
            NOW()
         )
	</insert>
	<!-- insert 폼에서 받아온 정보들은 filmId를 제외하고 입력이 진행됨(매개변수에 filmId가 없기 때문에), selectKey를 통해서 select 된 key 값이 폼 입력이 진행되고 난 후에 filmId 자리에 입력되게 됨 -->
	
	<!-- 영화 재고 확인 (프로시저 사용) -->
	<!-- Map : filmId(in), storeId(in), filmCount(out) -->
	<select id="selectFilmInStock" 
			parameterType="java.util.Map"
			resultType="int" 
			statementType="CALLABLE"> <!-- List<>의 제너릭 타입인 int를 resultType에 적어줌, select는 무조건 List로 출력-->
			<!-- mybatis에서 procedure나 function을 사용할 때, 일반적으로 sql에서 db 조회 시에 PreparedStatement 대신에 Callable을 사용함 -->
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer} <!-- mybatis procedure 호출 시 out -->
			)
		}
	</select>
	
	<!-- 영화 목록 -->
	<select id="selectFilmList"
			parameterType="java.util.Map"
			resultType="java.util.Map">
		SELECT 
			FID FID,
			title title,
			category category,
			price price,
			rating rating,
			actors actors
		FROM film_list
		<!-- <where> ***UI 적용하면서 사용 안하는 쿼리 부분***
			<if test="category != null and category != ''"> test안은 자바코드로 작성, ${} 붙일 필요 없음
				AND category = #{category}
			</if>
			<if test="price != null and price != ''"> 
				AND price = #{price}
			</if>
			<if test="rating != null and rating != ''"> 
				AND rating = #{rating}
			</if>
			<if test="title != null and title != ''"> 
				AND title LIKE CONCAT('%', #{title}, '%')
			</if>
			<if test="actors != null and actors != ''"> 
				AND actors LIKE CONCAT('%', #{actors}, '%')
			</if>
		</where>
		ORDER BY FID ASC
		LIMIT #{page.beginRow}, #{page.rowPerPage} -->
	</select>
	
	<!-- 페이징을 위한 쿼리 -->
	<select id="selectFilmTotal" parameterType="java.util.Map" resultType="Integer">
		SELECT COUNT(*) FROM film_list
		<where>
			<if test="category != null and category != ''" > <!-- test안은 자바코드로 작성, ${} 붙일 필요 없음 -->
				AND category = #{category}
			</if>
			<if test="price != null and price != ''">  <!-- 선택하지 않았을 때의 버그 수정 -->
				AND price = #{price}
			</if>
			<if test="rating != null and rating != ''"> 
				AND rating = #{rating}
			</if>
			<if test="title != null and title != ''"> 
				AND title LIKE CONCAT('%', #{title}, '%')
			</if>
			<if test="actors != null and actors != ''"> 
				AND actors LIKE CONCAT('%', #{actors}, '%')
			</if>
		</where>
	</select>
	
	<!-- 영화 상세보기 -->
	<select id="selectFilmOne" parameterType="Integer" resultType="java.util.Map">
		SELECT
			f.film_id filmId,
			f.title title,
			f.description description,
			YEAR(f.release_year) releaseYear,
			fa.actor_id actorId,
			GROUP_CONCAT(a.first_name, ' ', a.last_name) actorName,
			f.language_id languageId,
			f.original_language_id originalLanguageId,
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate,
			f.length length,
			f.replacement_cost replacementCost,
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate
		FROM 
			film f 
		LEFT JOIN film_actor fa ON f.film_id = fa.film_id
		LEFT JOIN actor a ON fa.actor_id = a.actor_id
		WHERE f.film_id = #{filmId}
	</select>
	
	<!-- 영화 상세보기에서 영화배우 선택 -->
	<select id="selectFilmActorListByFilm"
			parameterType="int"
			resultType="java.util.Map">
		SELECT
			a.actor_id actorId,
			CONCAT(first_name, ' ', last_name) name,
			film_id filmId
		FROM actor a LEFT JOIN (SELECT * FROM film_actor WHERE film_id = #{filmId}) t
		ON a.actor_id = t.actor_id
		ORDER BY first_name ASC
	</select>
	
	<!-- 영화 상세보기에서 영화배우 수정 (getFilmActorListByFilm), 다 지우고 새로 다시 입력함 -->
	<delete id="removeFilmActorListByFilm"
			parameterType="int">
		DELETE
		FROM film_actor
		WHERE film_id = #{filmId}
	</delete>
	
	<!-- 영화 상세보기에서 영화배우 새로 입력 -->
	<insert id="insertFilmActorListByFilm"
			parameterType="int">
		INSERT INTO film_actor(
			actor_id, 
			film_id
		) VALUES (
			#{actorId},
			#{filmId}
		)
	</insert>
</mapper>