<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	<!-- 영화 재고 확인 -->
	<!-- Map : filmId(in), storeId(in), filmCount(out) -->
	<select id="selectFilmInStock" 
			parameterType="java.util.Map"
			resultType="int" 
			statementType="CALLABLE"> <!-- List<>의 제너릭 타입인 int를 resultType에 적어줌, select는 무조건 List로 출력-->
			<!-- mybatis에서 procedure나 function을 사용할 때, 일반적으로 sql에서 db 조회 시에 PreparedStatement 대신에 Callable을 사용함 -->
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer} <!-- mybatis procedure 호출 시 out -->
			)
		}
	</select>
	
	<!-- 영화 목록 -->
	<select id="selectFilmList"
			parameterType="java.util.Map"
			resultType="java.util.Map">
		SELECT 
			FID,
			title,
			category,
			price,
			rating
		FROM film_list
		
		<where>
			<if test="categoryName != null"> <!-- test안은 자바코드로 작성, ${} 붙일 필요 없음 -->
				AND category = #{categoryName}
			</if>
		</where>
	</select>
	
	<!-- 페이징을 위한 쿼리 -->
	<!--  
	<select id="selectFilmTotal" parameterType="String" resultType="Integer">
		SELECT COUNT(*) FROM film_list
		<where>
			<if test="searchWord != null">
				title LIKE CONCAT('%',#{searchWord},'%') OR actors LIKE CONCAT('%',#{searchWord},'%')
			</if>
		</where>
	</select>
	-->
	
	<!-- 영화 상세보기 (수정 필요함) -->
	<select id="selectFilmOne" parameterType="Integer" resultType="java.util.Map">
		SELECT
			f.film_id filmId,
			f.title title,
			f.description description,
			f.release_year releaseYear,
			f.language_id languageId,
			f.original_language_id originalLanguageId,
			f.rental_duration rentalDuration,
			f.length length,
			f.replacement_cost replacementCost,
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate
			fs.p_film_count filmCount
		FROM 
			film f INNER JOIN film_in_stock fs
		ON f.film_id = fs.film_id
		WHERE film_id = #{filmId}
	</select>
</mapper>